<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>Dublette.Core</name>
  </assembly>
  <members>
    <member name="T:Dublette.Core.Dublettenprüfung">
      <summary>
            Die eigentliche Logiklasse zur Dublettenprüfung
            </summary>
    </member>
    <member name="M:Dublette.Core.Dublettenprüfung.Create">
      <summary>
            Gibt die Factory zurück um <see cref="T:Dublette.Core.Dublettenprüfung" /> zu erzeugen
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Dublettenprüfung.Create</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.Dublettenprüfung.Prüfe_Kandidaten(System.Collections.Generic.IEnumerable{Dublette.Core.Interfaces.IDublette})">
      <summary>
            Prüft die Dublettenkandidaten auf MD5-Gleichheit
            </summary>
      <param name="kandidaten">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>kandidaten</parameter>
            <parameter>M:Dublette.Core.Dublettenprüfung.Prüfe_Kandidaten(System.Collections.Generic.IEnumerable{Dublette.Core.Interfaces.IDublette})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Dublettenprüfung.Prüfe_Kandidaten(System.Collections.Generic.IEnumerable{Dublette.Core.Interfaces.IDublette})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.Dublettenprüfung.Sammle_Kandidaten(System.String)">
      <summary>
            Sammelt die Kandidaten anhand des übergebenen Pfades und mittels des Standardvergleichsmodus
            <see cref="F:Dublette.Core.Enums.Vergleichsmodi.Größe_und_Name" /></summary>
      <param name="pfad">Der Pfad, aus dem die Dateien ermittelt werden sollen</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Dublettenprüfung.Sammle_Kandidaten(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.Dublettenprüfung.Sammle_Kandidaten(System.String,Dublette.Core.Enums.Vergleichsmodi)">
      <summary>
            Sammelt die Kandidaten anhand des übergebenen Pfades und mittels des übergebenen Vergleichsmodus
            </summary>
      <param name="pfad">Der Pfad, aus dem die Dateien ermittelt werden sollen</param>
      <param name="modus">Der Vergleichsmodus der ausgeführt werden soll</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Dublettenprüfung.Sammle_Kandidaten(System.String,Dublette.Core.Enums.Vergleichsmodi)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Dublette.Core.DublettenprüfungFactory">
      <summary>
            Factorymethdode um eine Instanz vom Typ <see cref="T:Dublette.Core.Interfaces.IDublettenprüfung" /> zu erzeugen
            </summary>
    </member>
    <member name="M:Dublette.Core.DublettenprüfungFactory.Build">
      <summary>
            Ruft den Bau der Dublettenprüfung auf
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.DublettenprüfungFactory.Build</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.DublettenprüfungFactory.Create">
      <summary>
            Erzeugt das konfigurierte Ergebnisobjekt
            </summary>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.DublettenprüfungFactory.Create</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.DublettenprüfungFactory.OverrideAlgorithm``1(Dublette.Core.Enums.Vergleichsmodi)">
      <summary>
            Überschreibt einen übergebenen Algorithmus
            </summary>
      <param name="modus">Der Modus der mit dem übergebenen Typ überschrieben werden soll</param>
      <typeparam name="T">Der Typ der Prefilter-Klasse die überschrieben werden soll</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.DublettenprüfungFactory.OverrideAlgorithm``1(Dublette.Core.Enums.Vergleichsmodi)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.DublettenprüfungFactory.OverrideFileCollector(Dublette.Core.Interfaces.IFileCollector)">
      <summary>
            Überschreibt den Ermittler für Dateipfade
            Default: <see cref="T:Dublette.Core.FileCollector" /></summary>
      <param name="fileCollector">Der konkrete FileCollector, welcher die Dateien sammelt</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.DublettenprüfungFactory.OverrideFileCollector(Dublette.Core.Interfaces.IFileCollector)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Dublette.Core.EnumerableExtensions">
      <summary>
            Erweiterungsmethoden für Operationen auf <see cref="T:System.Collections.Generic.IEnumerable`1" /> und <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" /></summary>
    </member>
    <member name="M:Dublette.Core.EnumerableExtensions.HasMoreThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
      <summary>
            Prüft, ob die Auflistung mehr als <paramref name="skipAmount" /> Elemente enthält
            </summary>
      <param name="list">Die zu prüfende Liste</param>
      <param name="skipAmount">Die Anzahl der Elemente die enthalten sein dürfen</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Dublette.Core.EnumerableExtensions.HasMoreThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.EnumerableExtensions.HasMoreThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.EnumerableExtensions.ToPossibleDublette``1(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,Dublette.Core.Interfaces.IFileInfo}})">
      <summary>
            Wandelt eine Gruppe von Gruppierungskriterium X und Listen von Dateiinfos zu einer Liste von möglichen Dubletten um
            </summary>
      <param name="grouping"></param>
      <typeparam name="T"></typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.EnumerableExtensions.ToPossibleDublette``1(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,Dublette.Core.Interfaces.IFileInfo}})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.EnumerableExtensions.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Wandelt eine Enumerable-Auflistung in eine ReadOnly-Auflistung um
            </summary>
      <param name="list">Die Liste, die in eine ReadOnlyCollection verschoben werden soll</param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Dublette.Core.EnumerableExtensions.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})</parameter>
          </include>
        </markup>
      </typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.EnumerableExtensions.ToReadOnly``1(System.Collections.Generic.IEnumerable{``0})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Dublette.Core.FileCollector">
      <summary>
            Klasse, die Dateien aus dem Dateiverzeichnis ermittelt
            </summary>
    </member>
    <member name="M:Dublette.Core.FileCollector.#ctor">
      <summary>
        <markup>
          <include item="SMCAutoDocConstructor">
            <parameter>Dublette.Core.FileCollector</parameter>
          </include>
        </markup>
      </summary>
    </member>
    <member name="M:Dublette.Core.FileCollector.Collect(System.String)">
      <summary>
            Sammelt alle Dateien in dem übergebenen Pfad und gibt sie als Auflistung von <see cref="T:Dublette.Core.Interfaces.IFileInfo" /> zurück
            </summary>
      <param name="pfad">Der Pfad, innerhalb dessen die Dateien gesammelt werden sollen</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.FileCollector.Collect(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Dublette.Core.IoCExtension">
      <summary>
            Die Erweiterungsklasse für den IoC-Container um Vergleichsmodus als Enum einheitlich zu speichern.
            </summary>
    </member>
    <member name="T:Dublette.Core.Algorithms.CompareSizePrefilter">
      <summary>
            Der Prefilter, der nach der Dateigröße gruppiert um als Dubletten gefunden zu werden
            </summary>
    </member>
    <member name="M:Dublette.Core.Algorithms.CompareSizePrefilter.#ctor">
      <summary>
            Erzeugt eine neue Instanz für den Größenvergleichsfilter
            </summary>
    </member>
    <member name="P:Dublette.Core.Algorithms.CompareSizePrefilter.Filter">
      <summary>
            Hier wird auf die Dateigröße gefiltert
            </summary>
    </member>
    <member name="T:Dublette.Core.Algorithms.FilePrefilterBase">
      <summary>
            Basisklasse, unter welcher die Filter implementiert werden, die zur Vorermittlung potentieller Dubletten genutzt werden sollen
            </summary>
    </member>
    <member name="M:Dublette.Core.Algorithms.FilePrefilterBase.#ctor(Dublette.Core.Enums.Vergleichsmodi)">
      <summary>
            Erzeugt eine neue Instanz der Filterklasse und setzt den Modus
            </summary>
      <param name="mode">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>mode</parameter>
            <parameter>M:Dublette.Core.Algorithms.FilePrefilterBase.#ctor(Dublette.Core.Enums.Vergleichsmodi)</parameter>
          </include>
        </markup>
      </param>
    </member>
    <member name="M:Dublette.Core.Algorithms.FilePrefilterBase.CompareFiles(System.Collections.Generic.IReadOnlyCollection{Dublette.Core.Interfaces.IFileInfo})">
      <summary>
            Vergleicht die übergebenen Dateiinfos mit dem hinterlegten Filter
            </summary>
      <param name="files">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>files</parameter>
            <parameter>M:Dublette.Core.Algorithms.FilePrefilterBase.CompareFiles(System.Collections.Generic.IReadOnlyCollection{Dublette.Core.Interfaces.IFileInfo})</parameter>
          </include>
        </markup>
      </param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Algorithms.FilePrefilterBase.CompareFiles(System.Collections.Generic.IReadOnlyCollection{Dublette.Core.Interfaces.IFileInfo})</parameter>
          </include>
        </markup>
      </returns>
      <exception cref="T:System.ArgumentNullException"></exception>
    </member>
    <member name="P:Dublette.Core.Algorithms.FilePrefilterBase.Filter">
      <summary>
            Die zu überschreibende Methode die ein Filterobjekt zurückgeben soll, nach dem die Ergebnismenge an Dateien gruppiert wird.
            </summary>
    </member>
    <member name="P:Dublette.Core.Algorithms.FilePrefilterBase.Mode">
      <summary>
            Der Vergleichsmodus, den der Prefilter implementiert
            </summary>
    </member>
    <member name="T:Dublette.Core.DTOs.PossibleDublette">
      <summary>
            Klasse, die Dateidupletten zusammenhält. Wird für die Vorauswahl per <see cref="T:Dublette.Core.Interfaces.IFilePrefilter" /> als Ergebnismenge genutzt.
            Enthält weiterhin die Dateinformationen
            </summary>
    </member>
    <member name="M:Dublette.Core.DTOs.PossibleDublette.#ctor(System.Collections.Generic.IReadOnlyCollection{Dublette.Core.Interfaces.IFileInfo})">
      <summary>
            Instanziert eine neue mögliche Dublette mit übergebenen Dateiinformationen
            </summary>
      <param name="fileInfos">Die Dateiinformationen, die in dem Dublettenobjekt gehalten werden sollen</param>
    </member>
    <member name="P:Dublette.Core.DTOs.PossibleDublette.Dateipfade">
      <summary>
            Gibt die Dateipfade zurück, die in den als Dublette gefundenen FileInfos vorhanden sind
            </summary>
    </member>
    <member name="P:Dublette.Core.DTOs.PossibleDublette.FileInfos">
      <summary>
            Die FileInfos die als aktuell mögliche Dublette interpretiert sind
            </summary>
    </member>
    <member name="T:Dublette.Core.Enums.Vergleichsmodi">
      <summary>
            Die möglichen Modis um Dateien vorzufiltern, bevor diese Ergebnismenge in den Hashvergleich gegeben wird.
            Wird von <see cref="T:Dublette.Core.Interfaces.IFilePrefilter" /> mit Logik befüllt
            </summary>
    </member>
    <member name="F:Dublette.Core.Enums.Vergleichsmodi.Größe_und_Name">
      <summary>
            Sammelt alle Dateien mit einer gleichen Dateigröße, deren Dateinamen identisch sind
            </summary>
    </member>
    <member name="F:Dublette.Core.Enums.Vergleichsmodi.Größe">
      <summary>
            Sammelt alle Dateien mit einer gleichen Dateigröße
            </summary>
    </member>
    <member name="T:Dublette.Core.Interfaces.IDublette">
      <summary>
            Ergebnisobjekt, welches eine Dublette von mehr als einer Datei entspricht.
            Die Datei wird als <see cref="P:Dublette.Core.Interfaces.IDublette.Dateipfade" /> per Pfad gehalten.
            </summary>
    </member>
    <member name="P:Dublette.Core.Interfaces.IDublette.Dateipfade">
      <summary>
            Die Auflistung aller Dateipfade die als Dublette erkannt wurden
            </summary>
    </member>
    <member name="T:Dublette.Core.Interfaces.IDublettenprüfung">
      <summary>
            Das Interface zur Dublettenprüfung
            </summary>
    </member>
    <member name="M:Dublette.Core.Interfaces.IDublettenprüfung.Prüfe_Kandidaten(System.Collections.Generic.IEnumerable{Dublette.Core.Interfaces.IDublette})">
      <summary>
            Prüft die als mögliche Dublette gefundenen Kandidaten und vergleicht diese mittels <see cref="T:System.Security.Cryptography.MD5" /> Hash
            </summary>
      <param name="kandidaten">Die potentiell identischen Dubletten</param>
      <returns>Die Liste von Dubletten, die per Prüfung noch als eindeutig identifiziert wurden.</returns>
    </member>
    <member name="M:Dublette.Core.Interfaces.IDublettenprüfung.Sammle_Kandidaten(System.String)">
      <summary>
            Prüft alle Dateien im übergebenen Pfad anhand von Größe und Namen auf Gleichheit
            Nutzt den Standardmodus <see cref="F:Dublette.Core.Enums.Vergleichsmodi.Größe_und_Name" /></summary>
      <param name="pfad">Der Pfad, in dessen Dateistruktur nach möglichen Dubletten gesucht werden soll</param>
      <returns>Die Liste von Dubletten, die möglicherweise identisch sein können</returns>
    </member>
    <member name="M:Dublette.Core.Interfaces.IDublettenprüfung.Sammle_Kandidaten(System.String,Dublette.Core.Enums.Vergleichsmodi)">
      <summary>
            Prüft alle Dateien im übergebenen Pfad mit dem per <see cref="T:Dublette.Core.Enums.Vergleichsmodi" /> übergebenen <see cref="T:Dublette.Core.Interfaces.IFilePrefilter" /></summary>
      <param name="pfad">Der Pfad, in dessen Dateistruktur nach möglichen Dubletten gesucht werden soll</param>
      <param name="modus"></param>
      <returns>Die Liste von Dubletten, die möglicherweise identisch sein können</returns>
    </member>
    <member name="T:Dublette.Core.Interfaces.IFileCollector">
      <summary>
            Interface zur Ermittelung der Dateiinformationen für die Dublettenprüfung
            </summary>
    </member>
    <member name="M:Dublette.Core.Interfaces.IFileCollector.Collect(System.String)">
      <summary>
            Sammelt alle Dateien innerhalb eines Pfades und fügt sie in das IFileInfo Interface
            </summary>
      <param name="pfad">Der Pfad unter dessen nach Dateien gesucht werden soll</param>
      <returns>Die Liste aller Dateien als Dateiinformationsobjekt</returns>
    </member>
    <member name="T:Dublette.Core.Interfaces.IFileInfo">
      <summary>
            Repräsentation eines Dateiinfoobjektes.
            Hält alle Werte die für den Eindeutigkeitsvergleich relevant sind.
            </summary>
    </member>
    <member name="P:Dublette.Core.Interfaces.IFileInfo.FileName">
      <summary>
            Der Dateiname der Datei
            </summary>
    </member>
    <member name="P:Dublette.Core.Interfaces.IFileInfo.Path">
      <summary>
            Der Pfad zur Datei
            </summary>
    </member>
    <member name="P:Dublette.Core.Interfaces.IFileInfo.Size">
      <summary>
            Die Größe der Datei
            </summary>
    </member>
    <member name="T:Dublette.Core.Interfaces.IFilePrefilter">
      <summary>
            Interface um eine Liste von <see cref="T:Dublette.Core.Interfaces.IFileInfo" />s mit einem übergebenen <see cref="T:Dublette.Core.Enums.Vergleichsmodi" /> auf 
            mögliche Eindeutigkeit zu gruppieren
            </summary>
    </member>
    <member name="M:Dublette.Core.Interfaces.IFilePrefilter.CompareFiles(System.Collections.Generic.IReadOnlyCollection{Dublette.Core.Interfaces.IFileInfo})">
      <summary>
            Vergleicht die übergebene Liste von Dateiinformationen anhand des hinterlegten Modus
            </summary>
      <param name="files">Die Liste aller Dateiinformationen die verglichen werden soll</param>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Interfaces.IFilePrefilter.CompareFiles(System.Collections.Generic.IReadOnlyCollection{Dublette.Core.Interfaces.IFileInfo})</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="P:Dublette.Core.Interfaces.IFilePrefilter.Mode">
      <summary>
            Der Modus, den der aktuelle FilePrefilter entspricht
            </summary>
    </member>
    <member name="T:Dublette.Core.Wrapper.IoCWrapper">
      <summary>
            Wrapperklasse für den aktuell genutzten IoC-Container. 
            Derzeit: Autofac
            </summary>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.#ctor(Dublette.Core.Wrapper.IoCWrapper.IoCInitializator)">
      <summary>
            Erzeugt einen neuen IoC-Wrapper mittels einer vorinitialisierten Initializatorklasse
            </summary>
      <param name="initMethod">Die Klasse, die die bereits registrierten Containerinformationen enthält</param>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.Resolve``1">
      <summary>
            Baut mittels des Autofac-Containers ein Objekt zusammen
            </summary>
      <typeparam name="T">Der Typ / Das Interface des Objektes, welches erstellt werden soll</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Wrapper.IoCWrapper.Resolve``1</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.Resolve``1(System.String)">
      <summary>
            Baut mittels des Autofac-Containers mit dem übergebenen Key den übergebenen Typ zusammen
            </summary>
      <param name="key">Der key, der den Typen näher differnziert</param>
      <typeparam name="T">Der Typ / Das Interface des Objektes, welches erstellt werden soll</typeparam>
      <returns>
        <markup>
          <include item="SMCMissingTag">
            <parameter>returns</parameter>
            <parameter>M:Dublette.Core.Wrapper.IoCWrapper.Resolve``1(System.String)</parameter>
          </include>
        </markup>
      </returns>
    </member>
    <member name="T:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator">
      <summary>
            Klasse zum Initalisieren des IoC-Containers
            </summary>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.#ctor">
      <summary>
            ERzeugt eine neue Klasse zur Registrierung von Objekten im IoC-Container
            </summary>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.Register``2">
      <summary>
            Registriert einen Typ, der von einem Interface ableitet im IoC-Container
            </summary>
      <typeparam name="I">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>I</parameter>
            <parameter>M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.Register``2</parameter>
          </include>
        </markup>
      </typeparam>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.Register``2</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.Register``1">
      <summary>
            Registriert einen einzelnen Typ im IoC-Container, damit dieser resolved werden kann
            </summary>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.Register``1</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.Register``2(System.String)">
      <summary>
            Registriert einen Typ, der von einem Interface ableitet im IoC-Container.
            Hierbei wird der Key zur Unterscheidung genommen, sodass man hier mit dem übergebenen key resolven muss.
            </summary>
      <param name="key">Der Schlüsselparameter unter dem das Objekt aus dem IoC-Container herausgeholt wird</param>
      <typeparam name="I">Das Interface, welches den Typen implementiert</typeparam>
      <typeparam name="T">Der konkrete Typ der instanziert werden soll</typeparam>
    </member>
    <member name="M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.RegisterInstance``1(``0)">
      <summary>
            Registriert eine Instanz vom Typ T im IoC-Container
            </summary>
      <param name="instance">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>param</parameter>
            <parameter>instance</parameter>
            <parameter>M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.RegisterInstance``1(``0)</parameter>
          </include>
        </markup>
      </param>
      <typeparam name="T">
        <markup>
          <include item="SMCMissingParamTag">
            <parameter>typeparam</parameter>
            <parameter>T</parameter>
            <parameter>M:Dublette.Core.Wrapper.IoCWrapper.IoCInitializator.RegisterInstance``1(``0)</parameter>
          </include>
        </markup>
      </typeparam>
    </member>
  </members>
</doc>